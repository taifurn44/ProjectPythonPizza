# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Manager.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

connectMongoDB = 'mongodb+srv://thanapat:thithi41@cluster0.yl4di.mongodb.net/<dbname>?retryWrites=true&w=majority'
from PyQt5 import QtCore, QtGui, QtWidgets
import pymongo
import dns
from PyQt5.QtWidgets import QTableWidgetItem
from AddMenu import Ui_Addmenu
from EditMenu import Ui_EditMenu
import ctypes
MB_OK = 0x0
MB_OKCXL = 0x01
MB_YESNOCXL = 0x03
MB_YESNO = 0x04
MB_HELP = 0x4000
ICON_EXLAIM = 0x30
ICON_INFO = 0x40
ICON_STOP = 0x10
class Ui_Manager(object):
    def setupUi(self, Manager,Login,Pizza):
        Manager.setObjectName("Manager")
        Manager.setWindowModality(QtCore.Qt.NonModal)
        Manager.setEnabled(True)
        Manager.resize(583, 507)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Manager.sizePolicy().hasHeightForWidth())
        Manager.setSizePolicy(sizePolicy)
        Manager.setMinimumSize(QtCore.QSize(1, 1))
        Manager.setMaximumSize(QtCore.QSize(800, 600))
        Manager.setFocusPolicy(QtCore.Qt.NoFocus)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Pictures/icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Manager.setWindowIcon(icon)
        Manager.setToolTip("")
        Manager.setStyleSheet("")
        Manager.setModal(False)
        self.butBack = QtWidgets.QPushButton(Manager)
        self.butBack.setGeometry(QtCore.QRect(20, 461, 111, 31))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.butBack.sizePolicy().hasHeightForWidth())
        self.butBack.setSizePolicy(sizePolicy)
        self.butBack.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(170, 85, 0);\n"
"border-color: rgb(170, 85, 0);\n"
"")
        self.butBack.setDefault(False)
        self.butBack.setFlat(False)
        self.butBack.setObjectName("butBack")
        self.butAdd = QtWidgets.QPushButton(Manager)
        self.butAdd.setGeometry(QtCore.QRect(470, 191, 91, 31))
        self.butAdd.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(170, 85, 0);\n"
"color: white;")
        self.butAdd.setObjectName("butAdd")
        self.label_3 = QtWidgets.QLabel(Manager)
        self.label_3.setGeometry(QtCore.QRect(20, 18, 341, 31))
        self.label_3.setStyleSheet("font: 16pt \"MS Shell Dlg 2\";\n"
"color: rgb(0, 0, 0);")
        self.label_3.setObjectName("label_3")
        self.butEdit = QtWidgets.QPushButton(Manager)
        self.butEdit.setGeometry(QtCore.QRect(470, 241, 91, 31))
        self.butEdit.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(170, 85, 0);\n"
"color: white;")
        self.butEdit.setObjectName("butEdit")
        self.butDelete = QtWidgets.QPushButton(Manager)
        self.butDelete.setGeometry(QtCore.QRect(470, 291, 91, 31))
        self.butDelete.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(170, 85, 0);\n"
"color: white;")
        self.butDelete.setObjectName("butDelete")
        self.tbPizza = QtWidgets.QTableWidget(Manager)
        self.tbPizza.setGeometry(QtCore.QRect(40, 121, 411, 321))
        self.tbPizza.setStyleSheet("border-radius: 10px;\n"
"border-color: rgb(85, 255, 255);")
        self.tbPizza.setObjectName("tbPizza")
        self.tbPizza.setColumnCount(0)
        self.tbPizza.setRowCount(0)
        self.comboBox = QtWidgets.QComboBox(Manager)
        self.comboBox.setGeometry(QtCore.QRect(270, 71, 151, 31))
        self.comboBox.setStyleSheet("border-radius: 10px;")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";")
        self.comboBox.addItem('')
        self.comboBox.addItem('Pizza')
        self.comboBox.addItem('Chicken')
        self.comboBox.addItem('Combo')
        self.label = QtWidgets.QLabel(Manager)
        self.label.setGeometry(QtCore.QRect(230, 71, 31, 31))
        self.label.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(Manager)
        self.label_2.setGeometry(QtCore.QRect(40, 71, 31, 31))
        self.label_2.setStyleSheet("font: 9pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(Manager)
        self.textEdit.setGeometry(QtCore.QRect(70, 71, 111, 31))
        self.textEdit.setStyleSheet("border-radius: 10px;\n"
"border-color: rgb(85, 255, 255);")
        self.textEdit.setObjectName("textEdit")
        self.butAdd_2 = QtWidgets.QPushButton(Manager)
        self.butAdd_2.setGeometry(QtCore.QRect(470, 71, 91, 31))
        self.butAdd_2.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(170, 85, 0);\n"
"color: white;\n"
"border-color: rgb(85, 255, 255);")
        self.butAdd_2.setObjectName("butAdd_2")
        self.tbPizza.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tbPizza.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.butAdd.clicked.connect(self.Addmenu)
        self.butEdit.clicked.connect(self.Editmenu)
        self.butBack.clicked.connect(self.exit)
        self.butAdd_2.clicked.connect(self.setCondition)
        self.display({})
        self.butDelete.clicked.connect(self.Deletemenu)

        self.retranslateUi(Manager)
        QtCore.QMetaObject.connectSlotsByName(Manager)

        self.Manager = Manager
        self.Pizza = Pizza

    def exit(self):
        self.Pizza.show()
        self.Manager.close()

    def Editmenu(self):
        row = self.tbPizza.currentRow()
        currselect = self.tbPizza.item(row, 0)
        if str(currselect) == "None":
            ctypes.windll.user32.MessageBoxW(0, "Please select item!!", "Warning", ICON_EXLAIM | MB_OK)
        else:
            id = self.tbPizza.item(row, 0).text()
            with pymongo.MongoClient(connectMongoDB) as conn:
                db = conn.get_database('Project_Pizza')
                where = {'id': int(id)}
                cursor = db.Pizza.find(where)
                self.windows = QtWidgets.QDialog()
                self.ui = Ui_EditMenu()
                self.ui.setupUi(self.windows, cursor)
                self.windows.show()

    def Addmenu(self):
        self.windows = QtWidgets.QDialog()
        self.ui = Ui_Addmenu()
        self.ui.setupUi(self.windows)
        self.windows.show()

    def setCondition(self):
        mycondition = {}
        id = self.textEdit.toPlainText()
        type = self.comboBox.currentText()
        index = self.comboBox.currentIndex()

        if index != 0:
            mycondition['type'] = type
        if id != '':
            if id.isnumeric() == True:
                mycondition = {'id': {'$eq': int(id)}}
        self.display(mycondition)


    def Deletemenu(self):
        row = self.tbPizza.currentRow()
        currselect = self.tbPizza.item(row, 0)
        if str(currselect) == "None":
            ctypes.windll.user32.MessageBoxW(0, "Please select item!!", "Warning", ICON_EXLAIM | MB_OK)
        else:
            id = self.tbPizza.item(row, 0).text()
            with pymongo.MongoClient(connectMongoDB) as conn:
                db = conn.get_database('Project_Pizza')
                where = {'id': int(id)}
                result = ctypes.windll.user32.MessageBoxW(0, "Do you want delete this menu ?", "Delete", 4)
                if result == 6:
                    ctypes.windll.user32.MessageBoxW(0, "Delete Menu Successful", "Delete", 0)
                    result = db.Pizza.delete_one(where)
                elif result == 7:
                    print("no delete this menu")

    def display(self, condition):
        with pymongo.MongoClient(connectMongoDB) as conn:
            db = conn.get_database('Project_Pizza')
            where = condition
            count = db.Pizza.count_documents(where)
            cursor = db.Pizza.find(where)

            ## Table Widget
            self.tbPizza.setRowCount(count)
            self.tbPizza.setColumnCount(5)

            header1 = QtWidgets.QTableWidgetItem("ID")
            header2 = QtWidgets.QTableWidgetItem("Menu")
            header3 = QtWidgets.QTableWidgetItem("Type")
            header4 = QtWidgets.QTableWidgetItem("Price Size M")
            header5 = QtWidgets.QTableWidgetItem("Price Size L")

            self.tbPizza.setHorizontalHeaderItem(0, header1)
            self.tbPizza.setHorizontalHeaderItem(1, header2)
            self.tbPizza.setHorizontalHeaderItem(2, header3)
            self.tbPizza.setHorizontalHeaderItem(3, header4)
            self.tbPizza.setHorizontalHeaderItem(4, header5)

            row = 0
            for i in cursor:
                self.tbPizza.setItem(row, 0, QTableWidgetItem("{}".format(i['id'])))
                self.tbPizza.setItem(row, 1, QTableWidgetItem("{}".format(i['topping'])))
                self.tbPizza.setItem(row, 2, QTableWidgetItem("{}".format(i['type'])))
                self.tbPizza.setItem(row, 3, QTableWidgetItem("{}".format(i['product'][0]['price'])))
                self.tbPizza.setItem(row, 4, QTableWidgetItem("{}".format(i['product'][1]['price'])))
                row += 1

    def retranslateUi(self, Manager):
        _translate = QtCore.QCoreApplication.translate
        Manager.setWindowTitle(_translate("Manager", "Manager"))
        self.butBack.setText(_translate("Manager", "Exit"))
        self.butAdd.setText(_translate("Manager", "Add Menu"))
        self.label_3.setText(_translate("Manager", "Welcome Manager"))
        self.butEdit.setText(_translate("Manager", "Edit Menu"))
        self.butDelete.setText(_translate("Manager", "Delete"))
        self.label.setText(_translate("Manager", "Type"))
        self.label_2.setText(_translate("Manager", "ID"))
        self.butAdd_2.setText(_translate("Manager", "Search"))
#import Pictures_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Manager = QtWidgets.QDialog()
    ui = Ui_Manager()
    ui.setupUi(Manager)
    Manager.show()
    sys.exit(app.exec_())
